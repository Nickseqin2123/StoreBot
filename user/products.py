import json

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from requestss.user import getProducts, addProductCountUserCard
from models.models import Product
from keyboardd.inlines import inline
from other.others import add_ending


router = Router(name=__name__)


class Choice(StatesGroup):
    count = State()
    

@router.message(F.text == '–ú–∞–≥–∞–∑–∏–Ω')
async def store(message: Message):
    products_response = await getProducts()
    
    if isinstance(products_response, str):
        await message.answer(
            text=products_response
        )
    else:
        for item in products_response:
            product: Product = item[0]
            
            await message.answer(text=f'''
üì¶ |–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ** <b>{product.name}</b> **
üí∞ |–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: ** <b>{product.price:.1f} —Ä—É–±.</b> **
üí´ |–ö–æ–ª-–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: ** <b>{product.count} –µ–¥.</b> **
üìù |–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ** <b><u>{product.description}</u></b> **

üî• –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à {product.name}!
    ''', parse_mode='HTML', reply_markup=await inline(–î–æ–±–∞–≤–∏—Ç—å_–≤_–∫–æ—Ä–∑–∏–Ω—É={'id': product.id, 'name': product.name, 'operation': 'add_card'}))
            

@router.callback_query(F.func(lambda x: json.loads(x.data).get('operation') == 'add_card'))
async def add_card(callback: CallbackQuery, state: FSMContext):
    data = json.loads(callback.data)
    product_name = data['name']
    
    morph = add_ending(f'–°–∫–æ–ª—å–∫–æ {product_name} –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤—Ç–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?', product_name)
    
    await state.update_data(product_id=data['id'])
    
    await state.set_state(Choice.count)
    
    await callback.message.answer(
        text=morph
    )


@router.message(Choice.count)
async def get_finally_data(message: Message, state: FSMContext):
    data: dict = await state.get_data()
    data.update({'count': message.text})
    
    await state.clear()
    
    await summary(message, data, state)


async def summary(message: Message, data: dict, state: FSMContext):
    count: str = data['count']
    product_id = data['product_id']
    
    if count.isdigit():
        response = await addProductCountUserCard(user_id=message.from_user.id,
                                           product_id=product_id,
                                           count_change=abs(int(count)))
        
        await message.answer(
            text=response
        )
    else:
        await message.answer(
            text='–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:'
        )
        await state.update_data(product_id=product_id)
        await state.set_state(Choice.count)